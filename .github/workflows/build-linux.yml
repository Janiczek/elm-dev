on:
  push:
    branches:
      - release

name: Build Watchtower for Linux
jobs:
  build-packages:
    name: Build Libraries
    runs-on: ubuntu-latest
    steps:
      # First, check if the specific cache exists, so we don't waste ~3m of build
      # time restoring the 1.5GB+ cache for no reason. See https://github.com/actions/cache/pull/420
      # as this functionality may become part of actions/cache in future.
      - uses: bowd/cache@v3
        id: cache
        with:
          only-check-key: true
          path: |
            /home/runner/rootfs/alpine-v3.15-x86_64/home/runner/.ghcup
            /home/runner/rootfs/alpine-v3.15-x86_64/home/runner/.cabal
          key: ${{ runner.os }}-${{ hashFiles('stack.yaml.lock') }}-${{ hashFiles('elm.cabal') }}

      # If it doesn't exist, setup our cache action, while also trying to restore
      # a prior broader matching cache if it exists (saves a lot of time if just
      # modifying a few packages).
      - uses: actions/cache@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: |
            /home/runner/rootfs/alpine-v3.15-x86_64/home/runner/.ghcup
            /home/runner/rootfs/alpine-v3.15-x86_64/home/runner/.cabal
          key: ${{ runner.os }}-${{ hashFiles('stack.yaml.lock') }}-${{ hashFiles('elm.cabal') }}
          restore-keys: |
            ${{ runner.os }}-

      - uses: jirutka/setup-alpine@v1
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          branch: v3.15
          packages: >
            alpine-sdk
            autoconf
            gcc
            gmp
            gmp-dev
            libffi
            libffi-dev
            llvm10
            make
            musl-dev
            ncurses-dev
            ncurses-static
            tree
            wget
            zlib-dev
            zlib-static

      - uses: actions/checkout@v2
        if: steps.cache.outputs.cache-hit != 'true'

      # Install just our dependencies, this can take ~30m from scratch and is the
      # most part valuable to cache.
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          build=`pwd`
          cd /usr/lib/gcc/x86_64-alpine-linux-musl/10.3.1/
          cp crtbeginT.o crtbeginT.o.orig
          cp crtbeginS.o crtbeginT.o
          cp crtend.o crtend.o.orig
          cp crtendS.o crtend.o
          cd $build

          curl https://downloads.haskell.org/~ghcup/0.1.17.8/x86_64-linux-ghcup-0.1.17.8 > /usr/local/bin/ghcup && chmod +x /usr/local/bin/ghcup

          ghcup install cabal recommended
          PATH=$PATH:/home/runner/.ghcup/bin

          ghcup install ghc 9.0.2
          ghcup set ghc 9.0.2

          # Fix git complaint about 'dubious ownership' on Github CI
          git config --global --add safe.directory /home/runner/work/elm-watchtower/elm-watchtower

          cabal v2-update
          cabal v2-build --ghc-option=-optl=-static --ghc-option=-split-sections -O2 --only-dependencies

          cabal v2-build --ghc-option=-optl=-static --ghc-option=-split-sections -O2
          cp dist-newstyle/build/x86_64-linux/ghc-*/elm-*/x/watchtower/*opt/build/watchtower/watchtower ./
          strip -s ./watchtower

        shell: alpine.sh --root {0}


  # The install step is split to a separate job, so that if the we were building
  # from scratch and just spent 30 minutes building all the libraries, but then
  # the actual compile failed, we wouldn't throw away all that hard work without
  # caching it first. On a clean compile this means we'll save+restore the cache
  # unecessarily once (+~3m), but over all subsequent runs with a cache hit the
  # whole lib step will be skipped almost immediately so its worth it.
  install:
    name: Build Linux Executable
    runs-on: ubuntu-latest
    needs: build-packages
    steps:
      - uses: jirutka/setup-alpine@v1
        with:
          branch: v3.15
          packages: >
            alpine-sdk
            autoconf
            gcc
            gmp
            gmp-dev
            libffi
            libffi-dev
            llvm10
            make
            musl-dev
            ncurses-dev
            ncurses-static
            tree
            wget
            zlib-dev
            zlib-static

      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            /home/runner/rootfs/alpine-v3.15-x86_64/home/runner/.ghcup
            /home/runner/rootfs/alpine-v3.15-x86_64/home/runner/.cabal
          key: ${{ runner.os }}-${{ hashFiles('stack.yaml.lock') }}-${{ hashFiles('elm.cabal') }}
          restore-keys: |
            ${{ runner.os }}-

      - name: Compile static binary
        run: |
          build=`pwd`
          cd /usr/lib/gcc/x86_64-alpine-linux-musl/10.3.1/
          cp crtbeginT.o crtbeginT.o.orig
          cp crtbeginS.o crtbeginT.o
          cp crtend.o crtend.o.orig
          cp crtendS.o crtend.o
          cd $build

          curl https://downloads.haskell.org/~ghcup/0.1.17.8/x86_64-linux-ghcup-0.1.17.8 > /usr/local/bin/ghcup && chmod +x /usr/local/bin/ghcup

          ghcup install cabal recommended
          PATH=$PATH:/home/runner/.ghcup/bin

          ghcup install ghc 9.0.2
          ghcup set ghc 9.0.2

          # Fix git complaint about 'dubious ownership' on Github CI
          git config --global --add safe.directory /home/runner/work/elm-watchtower/elm-watchtower

          cabal v2-update
          cabal v2-build --ghc-option=-optl=-static --ghc-option=-split-sections -O2
          cp dist-newstyle/build/x86_64-linux/ghc-*/elm-*/x/watchtower/*opt/build/watchtower/watchtower ./
          strip -s ./watchtower

        shell: alpine.sh --root {0}

      - name: Archive watchtower artifact
        uses: actions/upload-artifact@v2
        with:
          name: watchtower
          path: watchtower
